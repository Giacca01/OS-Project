1) Configurazioni: ok
2) Libro mastro: usiamo shared memory
3) Grado di concorrenza: usiamo il semaforo begin
4) Accesso al master: problema dei lettori/scrittori (due sem creati ed inizializzati dal master)
5) Transaction pool: coda di messaggi (niente rollback in caso di errore, mandi solo un messaggio per avvertire l'utente) oppure lista privata (funzioe associata all'uscita del nodo che stampa il numero di transazioni presenti e argv oppure coda di messaggi per passare la transazione transaction poolscartata al nuovo figlio).
La lista privata è probabilmente più veloce.
Usiamo la coda di messaggi, usando come sender e receiver i PID
6) Lista nodi disponibili: memori condivisa
7) Per simulazione elaborazione blocco: usiamo nanosleep
8) Meccanismo di uscita:
	-il master, alla rilevazione della condizione di uscita (**), invia un segnale a tutti i figli per
	provocarne la terminazione. Il padre si mette in wait e prosegue con le operazioni di stampa e pulizia
	solo dopo lo sblocco.
	
(**) le condizioni d'errore sono:
	-scadenza timer simulazione
	-libro mastro pieno (invio segnale dal nodo al master)
Le repository contiene 5 branches:
	-Master: caricheremo qui tutto ciò che riguarda il modulo master. Iniziate a fare i commit appena avete qualche funzionalità pronta.
	magari mettendo tutta in una "vostra" cartella [Nome_Master]
	-User, Node: come per master, ma per i moduli nodo ed utente
	-develop: metteremo qui le varie versioni del progetto ottenute unendo i moduli e tutti gli altri
	dati inerenti ad esso
	-master: caricheremo gradualmente le versioni più significative, fino ad arrivare a quella definitiva
	
	
Risorse IPC usate:
	-tre segmenti di shared memory per libro mastro: ogni segmento è un oggetto di tipo register
	// Forse il punto successivo non serve più
	-due segmenti di shared memory per la lista di utenti e nodi: ogni segmento è un vettore di dimensione SO_USER_NUM o SO_NODES_NUM di oggetti ProcListElem
		L'idea è allocare un segmento di memoria, allocato e caricato dal master, a cui gli utenti ed i noti sono collegati IN SOLA LETTURA.
		Il segmento contiene una linked list (la dimensione non è fissa e così la rimozione in caso di terminazione anticipata).
		La deallocazione della lista spetta al master, così come l'eliminazione di nodi corrispondenti ad utenti che terminano in anticipo.
		Dato che ci serve conoscere i PID dei nodi, conviene anche qui fare come per la lista dei PID utente.
		Anche qui l'allocazione, la deallocazione e la modifica (serve??) spettano al master, mentre nodi ed utenti sono collegati in sola lettura.
	-TRANSACTION POOL: usiamo una coda di messaggi sola oppure uno per ogni nodo: una per ogni nodo, creata e deallocata dal master (così passare gli id agli utenti è più semplice)
	questa code sono create vuote dal master, non cambiano per tutta l'esecuzione. Sono deallocate in due casi:
		-fine esecuzione utente proprietario
		-fine simulazione
	conviene inserire gli id in una lista, avendo cura di rimuovere da essa l'id di eventuali nodi che terminano in anticipo(Può succedere???)
	-Una coda di messaggi unica tramite la quale:
		-il master ordina ai nodi di aggiungere un dato alla loro lista amici
		-un nodo chiede al master di creare un nuovo nodo a cui delegare l'esecuzione di una transazione
		I messaggi sono di tipo MsgGlobalQueue

	NOTA BENE: la lista amici è ora un vettore (o una lista) privato al nodo
Variabili del master

	// each partition is an array of registers
	// vettore che contiene i puntatori alle partizioni del registro ottenuti con shmat. PRIVATO al master
	// è presente, uguale, anche in nodi ed utenti, va ricreato perchè eseguiamo l'execve
	// Viene allocato dinamicamente (il contenuto delle celle è un puntatore ad una zona allocata da shmat)
	// ed è di dimensione REG_PARTITION_COUNT
	Register ** regPtrs; // to be loaded by master and by children via shmat

	// vettore che contiene gli id dei segmenti che costituiscono le partizioni del registro restituiti da shmget.
	// è PRIVATO al master e ci consente di passare gli id dei segmenti ai figli
	// viene allocato dinamicamente ed è di dimensione REG_PARTITION_COUNT
	// anche questo va ricreato perchè eseguiamo l'execve
	// in pratica, nel codice dei figli, passeremo il suo contenuto, ricevuto tramite fork, come argomento o variabile d'ambiente
	// altrimenti con execve andrebbe perso
	int * regPartsIds; // to be loaded by master and by children via execve

	// Puntatore privato al master alla lista degli utenti 
	// qui salviamo il valore di ritorno della shmat al segmento che contiene la lista degli utenti
	// serve per poter registrare la terminazione anticipata, stampare il bilancio, inviare i segnali, ecc...
	// lo replicheremo anche negli utenti e (forse) nei nodi
	// In alternativa, qui mettiamo i pid di tutti i figli.
	// Ogni figlio deve ricare questo vettore con quanto passatogli come argomento o variabile d'ambiente dopo la fork
	ProcListElem * usersList; // to be loaded by master and by children via execve
	// Serve perchè è stata reintrodotta la parte di rinnovamento della popolazione
	// This array contains the PIDs of the nodes
	// Funziona come sopra
	ProcListElem * nodesList; // to be loaded by master and by children via execve


	// Lista(sul serio, non un vettore) PRIVATA al nodo contenente i suoi amici
	// il master passa gli amici iniziali come argomento o variabili d'ambiente
	// il nodo aggiunge quanto ricevuto alla sua lista (inizialmente avrà SO_NODES_NUM nodi)
	// In più, quando legge dalla coda comune l'ordine di aggiungere un certo
	// processo ai suoi amici modifica la lista
	// per ogni nodo, subito prima della fork il master carica gli amici del processo nodo in questo vettore
	// il nodo riceve il vettore tramite fork e passa il contenuto come argomento/variabile d'ambiente
	// in modo che sopravviva all'execve
	// to be loaded by master and children via execve or via messages sent via global queue
	FriendsList * processesFriends; // Ogni nodo ha una lista di amici
	// Forse si può togliere inviando gli amici tramite coda globale



	// Vettore allocato dinamicamente e privato al master che contiene SO_NODES_NUM
	// oggetti di tipo TPElement
	// Consente agli utenti di indivduare l'ID di ogni transaction pool
	// per sapere a chi e dove mandare una transazione
	// e al master per stampare le transazioni non processate
	TPElement * tpList; // Ogni processo nodo ha un transaction pool

	// Coda globale deputata allo scambio di varie informazioni
	// tra nodi, master ed utenti
	int globalQueueId = -1;

	int wrPartSem; // Id of the set that contais the three semaphores 
					// used to write on the register's partitions
	int rdPartSem; // Id of the set that contais the three semaphores 
					// used to read from the register's partitions
	int fairStartSem; // Id of the semaphore used to make all the processes
					// start to compete for CPU at the same time

	// MAnca lo strumento di sincronizzazione per la modifica della lista
	// dei processi: è un caso complesso, nè il semaforo nè un smeplice intero sembrano adatti
	// Per la lista dei nodi non serve alcun semaforo (e anzi, si potrebbe valutarne l'eliminazione, perchè tanto basta estrarre un id di transaction pool)
	// perchè i nodi non cambiano durante la simulazione


IL NODO NON DEVE DEALLOCARE IL BLOCCO, altrimenti lo si perde.
Il nodo deve allocare il blocco con malloc ed aggiungerlo alla blocklist (con memcopy, perchè va sposato da heap a memoria condivisa)
(In realtà no, non usiamo punatori per le transazioni e per il blocco: quindi quando aggiungiamo un blocco alla partizione viene fatta una copia per valore di tutto
cioò che contiene, anche delle transazioni. È molto inefficiente)
Mettere un handler che deallochi le cose in caso di terminazione con CTRL+C (in tal caso, mentre si è nell'handler un altro CTRL+C va ignorato) (lo faccio io come parte della terminazione del master)
Dopo la fine del modulo master dovremmo definire una procedure di gestione seria, reentrant ed inserita in un modulo a parte (in modo che venga collegato solo se necessario)
I vettori nelle struct usate per segmenti IPC non allocati dinamicamente perchè la malloc alloca sullo heap
mentre noi vogliamo allocare nel segmento di memoria.
Se usassimo la malloc dovremmo fare la copia di quanto allocato
// semaforo lista nodi e utenti

// CTRL + C handler:
	-signaling the master will cause the end of the simulation
	-signaling the user will cause the user's termination and the master will be notified
	-signaling the node will cause the node's termination and the master will be notified(??)